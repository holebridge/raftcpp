// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raftcpp.proto

#include "raftcpp.pb.h"
#include "raftcpp.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace raftcpp {

static const char* RaftService_method_names[] = {
  "/raftcpp.RaftService/RequestVote",
  "/raftcpp.RaftService/AppendEntries",
  "/raftcpp.RaftService/InstallSnapshot",
};

std::unique_ptr< RaftService::Stub> RaftService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RaftService::Stub> stub(new RaftService::Stub(channel, options));
  return stub;
}

RaftService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestVote_(RaftService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AppendEntries_(RaftService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstallSnapshot_(RaftService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RaftService::Stub::RequestVote(::grpc::ClientContext* context, const ::raftcpp::RequestVoteRequest& request, ::raftcpp::RequestVoteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raftcpp::RequestVoteRequest, ::raftcpp::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestVote_, context, request, response);
}

void RaftService::Stub::async::RequestVote(::grpc::ClientContext* context, const ::raftcpp::RequestVoteRequest* request, ::raftcpp::RequestVoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raftcpp::RequestVoteRequest, ::raftcpp::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void RaftService::Stub::async::RequestVote(::grpc::ClientContext* context, const ::raftcpp::RequestVoteRequest* request, ::raftcpp::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::RequestVoteReply>* RaftService::Stub::PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftcpp::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raftcpp::RequestVoteReply, ::raftcpp::RequestVoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::RequestVoteReply>* RaftService::Stub::AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftcpp::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RaftService::Stub::AppendEntries(::grpc::ClientContext* context, const ::raftcpp::AppendEntriesRequest& request, ::raftcpp::AppendEntriesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raftcpp::AppendEntriesRequest, ::raftcpp::AppendEntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

void RaftService::Stub::async::AppendEntries(::grpc::ClientContext* context, const ::raftcpp::AppendEntriesRequest* request, ::raftcpp::AppendEntriesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raftcpp::AppendEntriesRequest, ::raftcpp::AppendEntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void RaftService::Stub::async::AppendEntries(::grpc::ClientContext* context, const ::raftcpp::AppendEntriesRequest* request, ::raftcpp::AppendEntriesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::AppendEntriesReply>* RaftService::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftcpp::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raftcpp::AppendEntriesReply, ::raftcpp::AppendEntriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AppendEntries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::AppendEntriesReply>* RaftService::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftcpp::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendEntriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RaftService::Stub::InstallSnapshot(::grpc::ClientContext* context, const ::raftcpp::IstallSnapshotRequest& request, ::raftcpp::InstallSnapshotReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raftcpp::IstallSnapshotRequest, ::raftcpp::InstallSnapshotReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallSnapshot_, context, request, response);
}

void RaftService::Stub::async::InstallSnapshot(::grpc::ClientContext* context, const ::raftcpp::IstallSnapshotRequest* request, ::raftcpp::InstallSnapshotReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raftcpp::IstallSnapshotRequest, ::raftcpp::InstallSnapshotReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallSnapshot_, context, request, response, std::move(f));
}

void RaftService::Stub::async::InstallSnapshot(::grpc::ClientContext* context, const ::raftcpp::IstallSnapshotRequest* request, ::raftcpp::InstallSnapshotReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallSnapshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::InstallSnapshotReply>* RaftService::Stub::PrepareAsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::raftcpp::IstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raftcpp::InstallSnapshotReply, ::raftcpp::IstallSnapshotRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallSnapshot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raftcpp::InstallSnapshotReply>* RaftService::Stub::AsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::raftcpp::IstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstallSnapshotRaw(context, request, cq);
  result->StartCall();
  return result;
}

RaftService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftService::Service, ::raftcpp::RequestVoteRequest, ::raftcpp::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RaftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raftcpp::RequestVoteRequest* req,
             ::raftcpp::RequestVoteReply* resp) {
               return service->RequestVote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftService::Service, ::raftcpp::AppendEntriesRequest, ::raftcpp::AppendEntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RaftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raftcpp::AppendEntriesRequest* req,
             ::raftcpp::AppendEntriesReply* resp) {
               return service->AppendEntries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftService::Service, ::raftcpp::IstallSnapshotRequest, ::raftcpp::InstallSnapshotReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RaftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raftcpp::IstallSnapshotRequest* req,
             ::raftcpp::InstallSnapshotReply* resp) {
               return service->InstallSnapshot(ctx, req, resp);
             }, this)));
}

RaftService::Service::~Service() {
}

::grpc::Status RaftService::Service::RequestVote(::grpc::ServerContext* context, const ::raftcpp::RequestVoteRequest* request, ::raftcpp::RequestVoteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftService::Service::AppendEntries(::grpc::ServerContext* context, const ::raftcpp::AppendEntriesRequest* request, ::raftcpp::AppendEntriesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftService::Service::InstallSnapshot(::grpc::ServerContext* context, const ::raftcpp::IstallSnapshotRequest* request, ::raftcpp::InstallSnapshotReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace raftcpp


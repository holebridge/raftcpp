// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftcpp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raftcpp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raftcpp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raftcpp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raftcpp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raftcpp_2eproto;
namespace raftcpp {
class AppendEntriesReply;
struct AppendEntriesReplyDefaultTypeInternal;
extern AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
class AppendEntriesRequest;
struct AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class InstallSnapshotReply;
struct InstallSnapshotReplyDefaultTypeInternal;
extern InstallSnapshotReplyDefaultTypeInternal _InstallSnapshotReply_default_instance_;
class IstallSnapshotRequest;
struct IstallSnapshotRequestDefaultTypeInternal;
extern IstallSnapshotRequestDefaultTypeInternal _IstallSnapshotRequest_default_instance_;
class RequestVoteReply;
struct RequestVoteReplyDefaultTypeInternal;
extern RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
class RequestVoteRequest;
struct RequestVoteRequestDefaultTypeInternal;
extern RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
}  // namespace raftcpp
PROTOBUF_NAMESPACE_OPEN
template<> ::raftcpp::AppendEntriesReply* Arena::CreateMaybeMessage<::raftcpp::AppendEntriesReply>(Arena*);
template<> ::raftcpp::AppendEntriesRequest* Arena::CreateMaybeMessage<::raftcpp::AppendEntriesRequest>(Arena*);
template<> ::raftcpp::InstallSnapshotReply* Arena::CreateMaybeMessage<::raftcpp::InstallSnapshotReply>(Arena*);
template<> ::raftcpp::IstallSnapshotRequest* Arena::CreateMaybeMessage<::raftcpp::IstallSnapshotRequest>(Arena*);
template<> ::raftcpp::RequestVoteReply* Arena::CreateMaybeMessage<::raftcpp::RequestVoteReply>(Arena*);
template<> ::raftcpp::RequestVoteRequest* Arena::CreateMaybeMessage<::raftcpp::RequestVoteRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raftcpp {

// ===================================================================

class RequestVoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftcpp.RequestVoteRequest) */ {
 public:
  inline RequestVoteRequest() : RequestVoteRequest(nullptr) {}
  ~RequestVoteRequest() override;
  explicit constexpr RequestVoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteRequest(const RequestVoteRequest& from);
  RequestVoteRequest(RequestVoteRequest&& from) noexcept
    : RequestVoteRequest() {
    *this = ::std::move(from);
  }

  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRequest& operator=(RequestVoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRequest*>(
               &_RequestVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoteRequest& a, RequestVoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVoteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftcpp.RequestVoteRequest";
  }
  protected:
  explicit RequestVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateIdFieldNumber = 2,
    kTermFieldNumber = 1,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // string candidateId = 2;
  void clear_candidateid();
  const std::string& candidateid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candidateid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candidateid();
  PROTOBUF_NODISCARD std::string* release_candidateid();
  void set_allocated_candidateid(std::string* candidateid);
  private:
  const std::string& _internal_candidateid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candidateid(const std::string& value);
  std::string* _internal_mutable_candidateid();
  public:

  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 lastLogIndex = 3;
  void clear_lastlogindex();
  int32_t lastlogindex() const;
  void set_lastlogindex(int32_t value);
  private:
  int32_t _internal_lastlogindex() const;
  void _internal_set_lastlogindex(int32_t value);
  public:

  // int32 lastLogTerm = 4;
  void clear_lastlogterm();
  int32_t lastlogterm() const;
  void set_lastlogterm(int32_t value);
  private:
  int32_t _internal_lastlogterm() const;
  void _internal_set_lastlogterm(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftcpp.RequestVoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidateid_;
  int32_t term_;
  int32_t lastlogindex_;
  int32_t lastlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftcpp_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftcpp.RequestVoteReply) */ {
 public:
  inline RequestVoteReply() : RequestVoteReply(nullptr) {}
  ~RequestVoteReply() override;
  explicit constexpr RequestVoteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteReply(const RequestVoteReply& from);
  RequestVoteReply(RequestVoteReply&& from) noexcept
    : RequestVoteReply() {
    *this = ::std::move(from);
  }

  inline RequestVoteReply& operator=(const RequestVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteReply& operator=(RequestVoteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteReply* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReply*>(
               &_RequestVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteReply& a, RequestVoteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVoteReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftcpp.RequestVoteReply";
  }
  protected:
  explicit RequestVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // bool voteGranted = 2;
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raftcpp.RequestVoteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t term_;
  bool votegranted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftcpp_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftcpp.AppendEntriesRequest) */ {
 public:
  inline AppendEntriesRequest() : AppendEntriesRequest(nullptr) {}
  ~AppendEntriesRequest() override;
  explicit constexpr AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesRequest(const AppendEntriesRequest& from);
  AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
    : AppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
               &_AppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendEntriesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppendEntriesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftcpp.AppendEntriesRequest";
  }
  protected:
  explicit AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kLeaderIdFieldNumber = 2,
    kTermFieldNumber = 1,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 6,
  };
  // repeated string entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();
  private:
  const std::string& _internal_entries(int index) const;
  std::string* _internal_add_entries();
  public:

  // string leaderId = 2;
  void clear_leaderid();
  const std::string& leaderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leaderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leaderid();
  PROTOBUF_NODISCARD std::string* release_leaderid();
  void set_allocated_leaderid(std::string* leaderid);
  private:
  const std::string& _internal_leaderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leaderid(const std::string& value);
  std::string* _internal_mutable_leaderid();
  public:

  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 prevLogIndex = 3;
  void clear_prevlogindex();
  int32_t prevlogindex() const;
  void set_prevlogindex(int32_t value);
  private:
  int32_t _internal_prevlogindex() const;
  void _internal_set_prevlogindex(int32_t value);
  public:

  // int32 prevLogTerm = 4;
  void clear_prevlogterm();
  int32_t prevlogterm() const;
  void set_prevlogterm(int32_t value);
  private:
  int32_t _internal_prevlogterm() const;
  void _internal_set_prevlogterm(int32_t value);
  public:

  // int32 leaderCommit = 6;
  void clear_leadercommit();
  int32_t leadercommit() const;
  void set_leadercommit(int32_t value);
  private:
  int32_t _internal_leadercommit() const;
  void _internal_set_leadercommit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftcpp.AppendEntriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderid_;
  int32_t term_;
  int32_t prevlogindex_;
  int32_t prevlogterm_;
  int32_t leadercommit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftcpp_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftcpp.AppendEntriesReply) */ {
 public:
  inline AppendEntriesReply() : AppendEntriesReply(nullptr) {}
  ~AppendEntriesReply() override;
  explicit constexpr AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesReply(const AppendEntriesReply& from);
  AppendEntriesReply(AppendEntriesReply&& from) noexcept
    : AppendEntriesReply() {
    *this = ::std::move(from);
  }

  inline AppendEntriesReply& operator=(const AppendEntriesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesReply& operator=(AppendEntriesReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesReply* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesReply*>(
               &_AppendEntriesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppendEntriesReply& a, AppendEntriesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendEntriesReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppendEntriesReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftcpp.AppendEntriesReply";
  }
  protected:
  explicit AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raftcpp.AppendEntriesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t term_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftcpp_2eproto;
};
// -------------------------------------------------------------------

class IstallSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftcpp.IstallSnapshotRequest) */ {
 public:
  inline IstallSnapshotRequest() : IstallSnapshotRequest(nullptr) {}
  ~IstallSnapshotRequest() override;
  explicit constexpr IstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IstallSnapshotRequest(const IstallSnapshotRequest& from);
  IstallSnapshotRequest(IstallSnapshotRequest&& from) noexcept
    : IstallSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline IstallSnapshotRequest& operator=(const IstallSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IstallSnapshotRequest& operator=(IstallSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IstallSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IstallSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const IstallSnapshotRequest*>(
               &_IstallSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IstallSnapshotRequest& a, IstallSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IstallSnapshotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IstallSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IstallSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IstallSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IstallSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IstallSnapshotRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IstallSnapshotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftcpp.IstallSnapshotRequest";
  }
  protected:
  explicit IstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kLastIncludedIndexFieldNumber = 3,
    kLastIncludedTermFieldNumber = 4,
    kOffsetFieldNumber = 5,
    kDoneFieldNumber = 7,
  };
  // repeated string data = 6;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 leaderId = 2;
  void clear_leaderid();
  int32_t leaderid() const;
  void set_leaderid(int32_t value);
  private:
  int32_t _internal_leaderid() const;
  void _internal_set_leaderid(int32_t value);
  public:

  // int32 lastIncludedIndex = 3;
  void clear_lastincludedindex();
  int32_t lastincludedindex() const;
  void set_lastincludedindex(int32_t value);
  private:
  int32_t _internal_lastincludedindex() const;
  void _internal_set_lastincludedindex(int32_t value);
  public:

  // int32 lastIncludedTerm = 4;
  void clear_lastincludedterm();
  int32_t lastincludedterm() const;
  void set_lastincludedterm(int32_t value);
  private:
  int32_t _internal_lastincludedterm() const;
  void _internal_set_lastincludedterm(int32_t value);
  public:

  // int32 offset = 5;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // bool done = 7;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raftcpp.IstallSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  int32_t term_;
  int32_t leaderid_;
  int32_t lastincludedindex_;
  int32_t lastincludedterm_;
  int32_t offset_;
  bool done_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftcpp_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftcpp.InstallSnapshotReply) */ {
 public:
  inline InstallSnapshotReply() : InstallSnapshotReply(nullptr) {}
  ~InstallSnapshotReply() override;
  explicit constexpr InstallSnapshotReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstallSnapshotReply(const InstallSnapshotReply& from);
  InstallSnapshotReply(InstallSnapshotReply&& from) noexcept
    : InstallSnapshotReply() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotReply& operator=(const InstallSnapshotReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotReply& operator=(InstallSnapshotReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstallSnapshotReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstallSnapshotReply* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotReply*>(
               &_InstallSnapshotReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InstallSnapshotReply& a, InstallSnapshotReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapshotReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallSnapshotReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstallSnapshotReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstallSnapshotReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstallSnapshotReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InstallSnapshotReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftcpp.InstallSnapshotReply";
  }
  protected:
  explicit InstallSnapshotReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
  };
  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raftcpp.InstallSnapshotReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftcpp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteRequest

// int32 term = 1;
inline void RequestVoteRequest::clear_term() {
  term_ = 0;
}
inline int32_t RequestVoteRequest::_internal_term() const {
  return term_;
}
inline int32_t RequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:raftcpp.RequestVoteRequest.term)
  return _internal_term();
}
inline void RequestVoteRequest::_internal_set_term(int32_t value) {
  
  term_ = value;
}
inline void RequestVoteRequest::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftcpp.RequestVoteRequest.term)
}

// string candidateId = 2;
inline void RequestVoteRequest::clear_candidateid() {
  candidateid_.ClearToEmpty();
}
inline const std::string& RequestVoteRequest::candidateid() const {
  // @@protoc_insertion_point(field_get:raftcpp.RequestVoteRequest.candidateId)
  return _internal_candidateid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestVoteRequest::set_candidateid(ArgT0&& arg0, ArgT... args) {
 
 candidateid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftcpp.RequestVoteRequest.candidateId)
}
inline std::string* RequestVoteRequest::mutable_candidateid() {
  std::string* _s = _internal_mutable_candidateid();
  // @@protoc_insertion_point(field_mutable:raftcpp.RequestVoteRequest.candidateId)
  return _s;
}
inline const std::string& RequestVoteRequest::_internal_candidateid() const {
  return candidateid_.Get();
}
inline void RequestVoteRequest::_internal_set_candidateid(const std::string& value) {
  
  candidateid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestVoteRequest::_internal_mutable_candidateid() {
  
  return candidateid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestVoteRequest::release_candidateid() {
  // @@protoc_insertion_point(field_release:raftcpp.RequestVoteRequest.candidateId)
  return candidateid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestVoteRequest::set_allocated_candidateid(std::string* candidateid) {
  if (candidateid != nullptr) {
    
  } else {
    
  }
  candidateid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidateid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (candidateid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    candidateid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftcpp.RequestVoteRequest.candidateId)
}

// int32 lastLogIndex = 3;
inline void RequestVoteRequest::clear_lastlogindex() {
  lastlogindex_ = 0;
}
inline int32_t RequestVoteRequest::_internal_lastlogindex() const {
  return lastlogindex_;
}
inline int32_t RequestVoteRequest::lastlogindex() const {
  // @@protoc_insertion_point(field_get:raftcpp.RequestVoteRequest.lastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVoteRequest::_internal_set_lastlogindex(int32_t value) {
  
  lastlogindex_ = value;
}
inline void RequestVoteRequest::set_lastlogindex(int32_t value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:raftcpp.RequestVoteRequest.lastLogIndex)
}

// int32 lastLogTerm = 4;
inline void RequestVoteRequest::clear_lastlogterm() {
  lastlogterm_ = 0;
}
inline int32_t RequestVoteRequest::_internal_lastlogterm() const {
  return lastlogterm_;
}
inline int32_t RequestVoteRequest::lastlogterm() const {
  // @@protoc_insertion_point(field_get:raftcpp.RequestVoteRequest.lastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVoteRequest::_internal_set_lastlogterm(int32_t value) {
  
  lastlogterm_ = value;
}
inline void RequestVoteRequest::set_lastlogterm(int32_t value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:raftcpp.RequestVoteRequest.lastLogTerm)
}

// -------------------------------------------------------------------

// RequestVoteReply

// int32 term = 1;
inline void RequestVoteReply::clear_term() {
  term_ = 0;
}
inline int32_t RequestVoteReply::_internal_term() const {
  return term_;
}
inline int32_t RequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:raftcpp.RequestVoteReply.term)
  return _internal_term();
}
inline void RequestVoteReply::_internal_set_term(int32_t value) {
  
  term_ = value;
}
inline void RequestVoteReply::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftcpp.RequestVoteReply.term)
}

// bool voteGranted = 2;
inline void RequestVoteReply::clear_votegranted() {
  votegranted_ = false;
}
inline bool RequestVoteReply::_internal_votegranted() const {
  return votegranted_;
}
inline bool RequestVoteReply::votegranted() const {
  // @@protoc_insertion_point(field_get:raftcpp.RequestVoteReply.voteGranted)
  return _internal_votegranted();
}
inline void RequestVoteReply::_internal_set_votegranted(bool value) {
  
  votegranted_ = value;
}
inline void RequestVoteReply::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:raftcpp.RequestVoteReply.voteGranted)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// int32 term = 1;
inline void AppendEntriesRequest::clear_term() {
  term_ = 0;
}
inline int32_t AppendEntriesRequest::_internal_term() const {
  return term_;
}
inline int32_t AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:raftcpp.AppendEntriesRequest.term)
  return _internal_term();
}
inline void AppendEntriesRequest::_internal_set_term(int32_t value) {
  
  term_ = value;
}
inline void AppendEntriesRequest::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftcpp.AppendEntriesRequest.term)
}

// string leaderId = 2;
inline void AppendEntriesRequest::clear_leaderid() {
  leaderid_.ClearToEmpty();
}
inline const std::string& AppendEntriesRequest::leaderid() const {
  // @@protoc_insertion_point(field_get:raftcpp.AppendEntriesRequest.leaderId)
  return _internal_leaderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppendEntriesRequest::set_leaderid(ArgT0&& arg0, ArgT... args) {
 
 leaderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raftcpp.AppendEntriesRequest.leaderId)
}
inline std::string* AppendEntriesRequest::mutable_leaderid() {
  std::string* _s = _internal_mutable_leaderid();
  // @@protoc_insertion_point(field_mutable:raftcpp.AppendEntriesRequest.leaderId)
  return _s;
}
inline const std::string& AppendEntriesRequest::_internal_leaderid() const {
  return leaderid_.Get();
}
inline void AppendEntriesRequest::_internal_set_leaderid(const std::string& value) {
  
  leaderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppendEntriesRequest::_internal_mutable_leaderid() {
  
  return leaderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppendEntriesRequest::release_leaderid() {
  // @@protoc_insertion_point(field_release:raftcpp.AppendEntriesRequest.leaderId)
  return leaderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppendEntriesRequest::set_allocated_leaderid(std::string* leaderid) {
  if (leaderid != nullptr) {
    
  } else {
    
  }
  leaderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (leaderid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    leaderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raftcpp.AppendEntriesRequest.leaderId)
}

// int32 prevLogIndex = 3;
inline void AppendEntriesRequest::clear_prevlogindex() {
  prevlogindex_ = 0;
}
inline int32_t AppendEntriesRequest::_internal_prevlogindex() const {
  return prevlogindex_;
}
inline int32_t AppendEntriesRequest::prevlogindex() const {
  // @@protoc_insertion_point(field_get:raftcpp.AppendEntriesRequest.prevLogIndex)
  return _internal_prevlogindex();
}
inline void AppendEntriesRequest::_internal_set_prevlogindex(int32_t value) {
  
  prevlogindex_ = value;
}
inline void AppendEntriesRequest::set_prevlogindex(int32_t value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:raftcpp.AppendEntriesRequest.prevLogIndex)
}

// int32 prevLogTerm = 4;
inline void AppendEntriesRequest::clear_prevlogterm() {
  prevlogterm_ = 0;
}
inline int32_t AppendEntriesRequest::_internal_prevlogterm() const {
  return prevlogterm_;
}
inline int32_t AppendEntriesRequest::prevlogterm() const {
  // @@protoc_insertion_point(field_get:raftcpp.AppendEntriesRequest.prevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntriesRequest::_internal_set_prevlogterm(int32_t value) {
  
  prevlogterm_ = value;
}
inline void AppendEntriesRequest::set_prevlogterm(int32_t value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:raftcpp.AppendEntriesRequest.prevLogTerm)
}

// repeated string entries = 5;
inline int AppendEntriesRequest::_internal_entries_size() const {
  return entries_.size();
}
inline int AppendEntriesRequest::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
inline std::string* AppendEntriesRequest::add_entries() {
  std::string* _s = _internal_add_entries();
  // @@protoc_insertion_point(field_add_mutable:raftcpp.AppendEntriesRequest.entries)
  return _s;
}
inline const std::string& AppendEntriesRequest::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const std::string& AppendEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:raftcpp.AppendEntriesRequest.entries)
  return _internal_entries(index);
}
inline std::string* AppendEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raftcpp.AppendEntriesRequest.entries)
  return entries_.Mutable(index);
}
inline void AppendEntriesRequest::set_entries(int index, const std::string& value) {
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:raftcpp.AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::set_entries(int index, std::string&& value) {
  entries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:raftcpp.AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:raftcpp.AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raftcpp.AppendEntriesRequest.entries)
}
inline std::string* AppendEntriesRequest::_internal_add_entries() {
  return entries_.Add();
}
inline void AppendEntriesRequest::add_entries(const std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:raftcpp.AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::add_entries(std::string&& value) {
  entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:raftcpp.AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:raftcpp.AppendEntriesRequest.entries)
}
inline void AppendEntriesRequest::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:raftcpp.AppendEntriesRequest.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:raftcpp.AppendEntriesRequest.entries)
  return entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppendEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raftcpp.AppendEntriesRequest.entries)
  return &entries_;
}

// int32 leaderCommit = 6;
inline void AppendEntriesRequest::clear_leadercommit() {
  leadercommit_ = 0;
}
inline int32_t AppendEntriesRequest::_internal_leadercommit() const {
  return leadercommit_;
}
inline int32_t AppendEntriesRequest::leadercommit() const {
  // @@protoc_insertion_point(field_get:raftcpp.AppendEntriesRequest.leaderCommit)
  return _internal_leadercommit();
}
inline void AppendEntriesRequest::_internal_set_leadercommit(int32_t value) {
  
  leadercommit_ = value;
}
inline void AppendEntriesRequest::set_leadercommit(int32_t value) {
  _internal_set_leadercommit(value);
  // @@protoc_insertion_point(field_set:raftcpp.AppendEntriesRequest.leaderCommit)
}

// -------------------------------------------------------------------

// AppendEntriesReply

// int32 term = 1;
inline void AppendEntriesReply::clear_term() {
  term_ = 0;
}
inline int32_t AppendEntriesReply::_internal_term() const {
  return term_;
}
inline int32_t AppendEntriesReply::term() const {
  // @@protoc_insertion_point(field_get:raftcpp.AppendEntriesReply.term)
  return _internal_term();
}
inline void AppendEntriesReply::_internal_set_term(int32_t value) {
  
  term_ = value;
}
inline void AppendEntriesReply::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftcpp.AppendEntriesReply.term)
}

// bool success = 2;
inline void AppendEntriesReply::clear_success() {
  success_ = false;
}
inline bool AppendEntriesReply::_internal_success() const {
  return success_;
}
inline bool AppendEntriesReply::success() const {
  // @@protoc_insertion_point(field_get:raftcpp.AppendEntriesReply.success)
  return _internal_success();
}
inline void AppendEntriesReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AppendEntriesReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:raftcpp.AppendEntriesReply.success)
}

// -------------------------------------------------------------------

// IstallSnapshotRequest

// int32 term = 1;
inline void IstallSnapshotRequest::clear_term() {
  term_ = 0;
}
inline int32_t IstallSnapshotRequest::_internal_term() const {
  return term_;
}
inline int32_t IstallSnapshotRequest::term() const {
  // @@protoc_insertion_point(field_get:raftcpp.IstallSnapshotRequest.term)
  return _internal_term();
}
inline void IstallSnapshotRequest::_internal_set_term(int32_t value) {
  
  term_ = value;
}
inline void IstallSnapshotRequest::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftcpp.IstallSnapshotRequest.term)
}

// int32 leaderId = 2;
inline void IstallSnapshotRequest::clear_leaderid() {
  leaderid_ = 0;
}
inline int32_t IstallSnapshotRequest::_internal_leaderid() const {
  return leaderid_;
}
inline int32_t IstallSnapshotRequest::leaderid() const {
  // @@protoc_insertion_point(field_get:raftcpp.IstallSnapshotRequest.leaderId)
  return _internal_leaderid();
}
inline void IstallSnapshotRequest::_internal_set_leaderid(int32_t value) {
  
  leaderid_ = value;
}
inline void IstallSnapshotRequest::set_leaderid(int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:raftcpp.IstallSnapshotRequest.leaderId)
}

// int32 lastIncludedIndex = 3;
inline void IstallSnapshotRequest::clear_lastincludedindex() {
  lastincludedindex_ = 0;
}
inline int32_t IstallSnapshotRequest::_internal_lastincludedindex() const {
  return lastincludedindex_;
}
inline int32_t IstallSnapshotRequest::lastincludedindex() const {
  // @@protoc_insertion_point(field_get:raftcpp.IstallSnapshotRequest.lastIncludedIndex)
  return _internal_lastincludedindex();
}
inline void IstallSnapshotRequest::_internal_set_lastincludedindex(int32_t value) {
  
  lastincludedindex_ = value;
}
inline void IstallSnapshotRequest::set_lastincludedindex(int32_t value) {
  _internal_set_lastincludedindex(value);
  // @@protoc_insertion_point(field_set:raftcpp.IstallSnapshotRequest.lastIncludedIndex)
}

// int32 lastIncludedTerm = 4;
inline void IstallSnapshotRequest::clear_lastincludedterm() {
  lastincludedterm_ = 0;
}
inline int32_t IstallSnapshotRequest::_internal_lastincludedterm() const {
  return lastincludedterm_;
}
inline int32_t IstallSnapshotRequest::lastincludedterm() const {
  // @@protoc_insertion_point(field_get:raftcpp.IstallSnapshotRequest.lastIncludedTerm)
  return _internal_lastincludedterm();
}
inline void IstallSnapshotRequest::_internal_set_lastincludedterm(int32_t value) {
  
  lastincludedterm_ = value;
}
inline void IstallSnapshotRequest::set_lastincludedterm(int32_t value) {
  _internal_set_lastincludedterm(value);
  // @@protoc_insertion_point(field_set:raftcpp.IstallSnapshotRequest.lastIncludedTerm)
}

// int32 offset = 5;
inline void IstallSnapshotRequest::clear_offset() {
  offset_ = 0;
}
inline int32_t IstallSnapshotRequest::_internal_offset() const {
  return offset_;
}
inline int32_t IstallSnapshotRequest::offset() const {
  // @@protoc_insertion_point(field_get:raftcpp.IstallSnapshotRequest.offset)
  return _internal_offset();
}
inline void IstallSnapshotRequest::_internal_set_offset(int32_t value) {
  
  offset_ = value;
}
inline void IstallSnapshotRequest::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:raftcpp.IstallSnapshotRequest.offset)
}

// repeated string data = 6;
inline int IstallSnapshotRequest::_internal_data_size() const {
  return data_.size();
}
inline int IstallSnapshotRequest::data_size() const {
  return _internal_data_size();
}
inline void IstallSnapshotRequest::clear_data() {
  data_.Clear();
}
inline std::string* IstallSnapshotRequest::add_data() {
  std::string* _s = _internal_add_data();
  // @@protoc_insertion_point(field_add_mutable:raftcpp.IstallSnapshotRequest.data)
  return _s;
}
inline const std::string& IstallSnapshotRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& IstallSnapshotRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:raftcpp.IstallSnapshotRequest.data)
  return _internal_data(index);
}
inline std::string* IstallSnapshotRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:raftcpp.IstallSnapshotRequest.data)
  return data_.Mutable(index);
}
inline void IstallSnapshotRequest::set_data(int index, const std::string& value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:raftcpp.IstallSnapshotRequest.data)
}
inline void IstallSnapshotRequest::set_data(int index, std::string&& value) {
  data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:raftcpp.IstallSnapshotRequest.data)
}
inline void IstallSnapshotRequest::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:raftcpp.IstallSnapshotRequest.data)
}
inline void IstallSnapshotRequest::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raftcpp.IstallSnapshotRequest.data)
}
inline std::string* IstallSnapshotRequest::_internal_add_data() {
  return data_.Add();
}
inline void IstallSnapshotRequest::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:raftcpp.IstallSnapshotRequest.data)
}
inline void IstallSnapshotRequest::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:raftcpp.IstallSnapshotRequest.data)
}
inline void IstallSnapshotRequest::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:raftcpp.IstallSnapshotRequest.data)
}
inline void IstallSnapshotRequest::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:raftcpp.IstallSnapshotRequest.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IstallSnapshotRequest::data() const {
  // @@protoc_insertion_point(field_list:raftcpp.IstallSnapshotRequest.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IstallSnapshotRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:raftcpp.IstallSnapshotRequest.data)
  return &data_;
}

// bool done = 7;
inline void IstallSnapshotRequest::clear_done() {
  done_ = false;
}
inline bool IstallSnapshotRequest::_internal_done() const {
  return done_;
}
inline bool IstallSnapshotRequest::done() const {
  // @@protoc_insertion_point(field_get:raftcpp.IstallSnapshotRequest.done)
  return _internal_done();
}
inline void IstallSnapshotRequest::_internal_set_done(bool value) {
  
  done_ = value;
}
inline void IstallSnapshotRequest::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:raftcpp.IstallSnapshotRequest.done)
}

// -------------------------------------------------------------------

// InstallSnapshotReply

// int32 term = 1;
inline void InstallSnapshotReply::clear_term() {
  term_ = 0;
}
inline int32_t InstallSnapshotReply::_internal_term() const {
  return term_;
}
inline int32_t InstallSnapshotReply::term() const {
  // @@protoc_insertion_point(field_get:raftcpp.InstallSnapshotReply.term)
  return _internal_term();
}
inline void InstallSnapshotReply::_internal_set_term(int32_t value) {
  
  term_ = value;
}
inline void InstallSnapshotReply::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftcpp.InstallSnapshotReply.term)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftcpp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raftcpp_2eproto
